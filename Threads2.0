/*
This code was pulled from the repository of another student (https://github.com/Ray-Christian/Cit360/blob/master/TestThread/src/RunnableThread.java) for the purpose of an example.

Edits from the original code have been made to accomodate my purposes here.

All commentary here is mine explaining what is happening each step of the way.
*/

//Author has chosen to use the Runnable method of implementing his threads
  class RunnableDemo implements Runnable {
     private Thread t;
     private String threadName;

//Calls his method, named "RunnableDemo" and passes what will become the thread name in via string. He's included a System.out command to let the user know the thread has been created.
     RunnableDemo( String name){
         threadName = name;
         System.out.println("Creating " +  threadName );
     }
     
//This command starts the thread. Note that *starting* the thread is different than running the thread. Starting it may include gathering resources, such as creating variables and locating their variables or even starting other threads, that will be used when the thread is actually executed (run).
//In this case, starting on line 22 the thread displays a console message stating that it's starting. If no thread exists, it calls the Thread constructor function and passes a string for the name. This code is flawed in that if there is a thread currently in place (t != null), then there's no instructions about what should happen.  
    public void start ()
         {
            System.out.println("Starting " +  threadName );
            if (t == null)
            {
               t = new Thread (this, threadName);
               t.start ();
            }
         }

      }

//The above start() method ensures a thread is created - the equivalent of turning the car on and leaving it in park. This run() method actually triggers the desired action of the method. In this case, it's simply saying "I'm running!", then loops through a countdown with a sleep timer until the counter reaches zero and the thread terminates. In a real scenario, this is where the magic would need to happen.
     public void run() {
        System.out.println("Running " +  threadName );
        try {
           for(int i = 4; i > 0; i--) {
              System.out.println("Thread: " + threadName + ", " + i);
              // Let the thread sleep for a while.
              Thread.sleep(50);
           }
       } catch (InterruptedException e) {
           System.out.println("Thread " +  threadName + " interrupted.");
       }
       System.out.println("Thread " +  threadName + " exiting.");
     }

     
//The start of it all. This method creates two instances of RunnableDemo class titled R1 and R2, respectively, with each one passing a name to the threads within, Thread-1 and Thread-2, respectively. A better naming scheme here is recommended to make this code more readable.

  public class RunnableThread {
     public static void main(String args[]) {

        RunnableDemo R1 = new RunnableDemo( "Thread-1");
        R1.start();

        RunnableDemo R2 = new RunnableDemo( "Thread-2");
        R2.start();
     }   
  }
