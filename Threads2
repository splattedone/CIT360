--Imports
package com.journaldev.threadpool;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class WorkerPool {

    public static void main(String args[]) throws InterruptedException{
    
        //RejectedExecutionHandler implementation. This will manage tasks that can't be handled by the executor. 
        RejectedExecutionHandlerImpl rejectionHandler = new RejectedExecutionHandlerImpl();
        
        //Get the ThreadFactory implementation to use. This lets us create new threads on demand. 
        ThreadFactory threadFactory = Executors.defaultThreadFactory();
        
        //creating the ThreadPoolExecutor
        ThreadPoolExecutor executorPool = new ThreadPoolExecutor(2, 4, 10, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2), threadFactory, rejectionHandler);
        
        //start the monitoring thread
        MyMonitorThread monitor = new MyMonitorThread(executorPool, 3);
        
        Thread monitorThread = new Thread(monitor);
        monitorThread.start();
        
        --Use a loop to create jobs that will be added to the thread pool. 
        for(int i=0; i<10; i++){
            executorPool.execute(new WorkerThread("cmd"+i));
        }
        
        /*
        Create additional jobs, as needed.
        */
        
        Thread.sleep(30000);
        
        --Shut down the pool. At this point no new threads will be accepted but lets existing threads complete. Use shutdownNow() to pull the plug and end all pool processes immediately.
        executorPool.shutdown();
        
        //shut down the monitor thread
        Thread.sleep(5000);
        
        --Similar to shutting down the pool, only it's just the monitor.
        monitor.shutdown();
        
    }
}
